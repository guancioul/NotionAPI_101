definitions:
  model.Account:
    properties:
      id:
        example: 1
        format: int64
        type: integer
      name:
        example: account name
        type: string
      uuid:
        example: 550e8400-e29b-41d4-a716-446655440000
        format: uuid
        type: string
    type: object
  requestModel.NotionCreateDBPageRequest:
    properties:
      properties:
        additionalProperties: true
        type: object
    type: object
  requestModel.NotionCreateDatabaseRequest:
    properties:
      properties:
        additionalProperties: true
        type: object
      title:
        items:
          additionalProperties: true
          type: object
        type: array
    type: object
  requestModel.NotionQueryDatabaseRequest:
    properties:
      filter:
        additionalProperties: true
        type: object
      sorts:
        items:
          additionalProperties: true
          type: object
        type: array
    type: object
  responseModel.CalendarEvents:
    properties:
      accessRole:
        type: string
      defaultReminders:
        items:
          type: object
        type: array
      description:
        type: string
      etag:
        type: string
      items:
        items:
          $ref: '#/definitions/responseModel.Event'
        type: array
      kind:
        type: string
      nextSyncToken:
        type: string
      summary:
        type: string
      timeZone:
        type: string
      updated:
        type: string
    type: object
  responseModel.Database:
    properties:
      archived:
        type: boolean
      cover: {}
      created_by:
        properties:
          id:
            type: string
          object:
            type: string
        type: object
      created_time:
        type: string
      icon: {}
      id:
        type: string
      last_edited_by:
        properties:
          id:
            type: string
          object:
            type: string
        type: object
      last_edited_time:
        type: string
      object:
        type: string
      parent:
        properties:
          database_id:
            type: string
          type:
            type: string
        type: object
      properties:
        additionalProperties: true
        type: object
      public_url: {}
      url:
        type: string
    type: object
  responseModel.Event:
    properties:
      created:
        type: string
      creator:
        properties:
          email:
            type: string
        type: object
      end:
        properties:
          dateTime:
            type: string
          timeZone:
            type: string
        type: object
      etag:
        type: string
      eventType:
        type: string
      htmlLink:
        type: string
      iCalUID:
        type: string
      id:
        type: string
      kind:
        type: string
      organizer:
        properties:
          displayName:
            type: string
          email:
            type: string
          self:
            type: boolean
        type: object
      sequence:
        type: integer
      start:
        properties:
          dateTime:
            type: string
          timeZone:
            type: string
        type: object
      status:
        type: string
      summary:
        type: string
      updated:
        type: string
    type: object
  responseModel.NotionCreateDatabaseResponse:
    properties:
      archived:
        type: boolean
      created_time:
        type: string
      id:
        type: string
      is_inline:
        type: boolean
      last_edited_time:
        type: string
      object:
        type: string
      parent:
        properties:
          page_id:
            type: string
          type:
            type: string
        type: object
      properties:
        additionalProperties: true
        type: object
      title:
        items:
          additionalProperties: true
          type: object
        type: array
      url:
        type: string
    type: object
  responseModel.NotionQueryDatabaseResponse:
    properties:
      developer_survey:
        type: string
      has_more:
        type: boolean
      next_cursor: {}
      object:
        type: string
      page_or_database:
        type: object
      results:
        items:
          $ref: '#/definitions/responseModel.Database'
        type: array
      type:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/v1/googleCalendar/getEventList/{calendarId}:
    get:
      consumes:
      - application/json
      description: Get a list of events from Google Calendar
      parameters:
      - description: Database ID
        in: path
        name: calendarId
        required: true
        type: string
      - description: timeMin
        in: query
        name: timeMin
        type: string
      - description: timeMax
        in: query
        name: timeMax
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/responseModel.CalendarEvents'
            type: array
        "400":
          description: fail
          schema:
            type: string
        "404":
          description: Calendar not found
          schema:
            type: string
      summary: Get Google Calendar Event List
      tags:
      - googleCalendar
  /api/v1/notion/createDBPage/{databaseId}:
    post:
      consumes:
      - application/json
      description: Creates a new page in the specified database or as a child of an
        existing page.
      parameters:
      - description: Database ID
        in: path
        name: databaseId
        required: true
        type: string
      - description: Request Body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requestModel.NotionCreateDBPageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/responseModel.Database'
            type: array
        "400":
          description: Invalid input
          schema:
            type: string
      summary: Create a new Notion Page
      tags:
      - notion
  /api/v1/notion/createDatabase/{pageId}:
    post:
      consumes:
      - application/json
      description: Creates a database as a subpage in the specified parent page, with
        the specified properties schema. Currently, the parent of a new database must
        be a Notion page or a wiki database.
      parameters:
      - description: Page ID
        in: path
        name: pageId
        required: true
        type: string
      - description: Request Body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requestModel.NotionCreateDatabaseRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/responseModel.NotionCreateDatabaseResponse'
            type: array
        "400":
          description: Invalid input
          schema:
            type: string
      summary: Create a new Notion Database
      tags:
      - notion
  /api/v1/notion/queryDatabase/{databaseId}:
    post:
      consumes:
      - application/json
      description: Queries a database, returning a paginated array of `Page` objects
        within the database.
      parameters:
      - description: Database ID
        in: path
        name: databaseId
        required: true
        type: string
      - description: Request Body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requestModel.NotionQueryDatabaseRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/responseModel.NotionQueryDatabaseResponse'
            type: array
        "400":
          description: Invalid input
          schema:
            type: string
      summary: Query Notion Database
      tags:
      - notion
  /api/v1/sync/syncNotionToGoogleCalendar/{databaseId}/{calendarId}:
    post:
      consumes:
      - application/json
      description: Sync Google Calendar to Notion for one day
      parameters:
      - description: Page ID
        in: path
        name: databaseId
        required: true
        type: string
      - description: Calendar ID
        in: path
        name: calendarId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/responseModel.NotionCreateDatabaseResponse'
            type: array
        "400":
          description: Invalid input
          schema:
            type: string
      summary: Sync Google Calendar to Notion
      tags:
      - sync
  /examples/attribute:
    get:
      consumes:
      - application/json
      description: attribute
      parameters:
      - description: string enums
        enum:
        - A
        - B
        - C
        in: query
        name: enumstring
        type: string
      - description: int enums
        enum:
        - 1
        - 2
        - 3
        in: query
        name: enumint
        type: integer
      - description: int enums
        enum:
        - 1.1
        - 1.2
        - 1.3
        in: query
        name: enumnumber
        type: number
      - description: string valid
        in: query
        maxLength: 10
        minLength: 5
        name: string
        type: string
      - description: int valid
        in: query
        maximum: 10
        minimum: 1
        name: int
        type: integer
      - default: A
        description: string default
        in: query
        name: default
        type: string
      produces:
      - text/plain
      responses:
        "200":
          description: answer
          schema:
            type: string
        "400":
          description: ok
          schema:
            type: string
        "404":
          description: ok
          schema:
            type: string
        "500":
          description: ok
          schema:
            type: string
      summary: attribute example
      tags:
      - example
  /examples/calc:
    get:
      consumes:
      - application/json
      description: plus
      parameters:
      - description: used for calc
        in: query
        name: val1
        required: true
        type: integer
      - description: used for calc
        in: query
        name: val2
        required: true
        type: integer
      produces:
      - text/plain
      responses:
        "200":
          description: answer
          schema:
            type: integer
        "400":
          description: ok
          schema:
            type: string
        "404":
          description: ok
          schema:
            type: string
        "500":
          description: ok
          schema:
            type: string
      summary: calc example
      tags:
      - example
  /examples/groups/{group_id}/accounts/{account_id}:
    get:
      consumes:
      - application/json
      description: path params
      parameters:
      - description: Group ID
        in: path
        name: group_id
        required: true
        type: integer
      - description: Account ID
        in: path
        name: account_id
        required: true
        type: integer
      produces:
      - text/plain
      responses:
        "200":
          description: answer
          schema:
            type: string
        "400":
          description: ok
          schema:
            type: string
        "404":
          description: ok
          schema:
            type: string
        "500":
          description: ok
          schema:
            type: string
      summary: path params example
      tags:
      - example
  /examples/header:
    get:
      consumes:
      - application/json
      description: custome header
      parameters:
      - description: Authentication header
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "200":
          description: answer
          schema:
            type: string
        "400":
          description: ok
          schema:
            type: string
        "404":
          description: ok
          schema:
            type: string
        "500":
          description: ok
          schema:
            type: string
      summary: custome header example
      tags:
      - example
  /examples/ping:
    get:
      consumes:
      - application/json
      description: do ping
      produces:
      - text/plain
      responses:
        "200":
          description: pong
          schema:
            type: string
        "400":
          description: ok
          schema:
            type: string
        "404":
          description: ok
          schema:
            type: string
        "500":
          description: ok
          schema:
            type: string
      summary: ping example
      tags:
      - example
  /examples/post:
    post:
      consumes:
      - application/json
      description: post request example
      parameters:
      - description: Account Info
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/model.Account'
      produces:
      - text/plain
      responses:
        "200":
          description: success
          schema:
            type: string
        "500":
          description: fail
          schema:
            type: string
      summary: post request example
  /examples/securities:
    get:
      consumes:
      - application/json
      description: custome header
      parameters:
      - description: Authentication header
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: answer
          schema:
            type: string
        "400":
          description: ok
          schema:
            type: string
        "404":
          description: ok
          schema:
            type: string
        "500":
          description: ok
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      - OAuth2Implicit:
        - admin
        - write
      summary: custome header example
      tags:
      - example
swagger: "2.0"
